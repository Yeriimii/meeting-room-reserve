"""
Django settings for myreserve project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-8p0m*$*g(9!oq#jk^h)hb(qx1698%e0-olo6!oiwspbp6fe3^-"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third apps
    'bootstrap4',  # bootstrap_pagination
    'django_extensions',  # ipython 사용 (model 확인용)
    'debug_toolbar',  # sql debug toolbar
    # local apps
    "accounts",
    "reserveapp",
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # debug toolbar 삽입
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "myreserve.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # File System Template Loader
            os.path.join(BASE_DIR, 'myreserve', 'templates')
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myreserve.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]

LOGOUT_REDIRECT_URL = reverse_lazy('login')

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ko-KR"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# django-debug-toolbar
INTERNAL_IPS = ['127.0.0.1']  # dbt(django-debug-toolbar)를 위해 입력.

# AUTH_USER_MODEL = 'instagram.User'  # 프로젝트 만들자마자 해야 삽질을 덜 한다.
AUTH_USER_MODEL = 'auth.User'  # django/conf/global/settings 에 값이 저장되있음. 이 값은 항상 현재 활성화되있는 app의 User 모델을 가리킴.

from django.contrib.messages import constants as message_constants

MESSAGE_TAGS = {
    # message_constants.INFO: 'secondary',  # 디폴트 설정
    message_constants.DEBUG: 'secondary',
    message_constants.ERROR: 'danger',
}

# python manage.py collectstatic 명령이 참조되는 설정. 여러 디렉토리의 static파일들을 이 경로의 디렉토리로 복사하여,
# 서빙. 배포에서만 의미있는 설정.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [  # File System Loader에 의해 참조되는 설정
    os.path.join(BASE_DIR, 'myreserve', 'static')
]
STATICFILES_FINDERS = [  # 설정된 finders를 통해 static 템플릿이 있을 디렉토리 목록을 구성.(서버 초기 시작 시에만 1회 작성)
    'django.contrib.staticfiles.finders.FileSystemFinder',  # "장고앱/static" 걍로를 "디렉토리 목록"에 추가
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',  # STATICFILES_DIRS 값을 "디렉토리 목록"에 추가
]
# 결국, 정적 컨텐츠는 외부 웹서버를 통해 효율적인 처리. (memcache/redis 캐시 등, CDN)

# media 파일 다루는 경로
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # media 파일을 저장할 폴더
